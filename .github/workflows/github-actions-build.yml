---
name: Go Release on Tag
on:
  push:
    tags:
      - v*.*.*
permissions:
  contents: write
jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        exclude:
          - goos: windows
            goarch: arm64 # Example of excluding a specific combination if needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache: true
      - name: Get version from tag
        id: get_version
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build Go Application
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }} version $VERSION..."
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w -X 'main.version=${{ github.ref_name }}'" -o git-reports${{ runner.os == 'Windows' && '.exe' || '' }} .
      - name: Archive Binary
        run: |
          BINARY_NAME=git-reports${{ matrix.goos == 'windows' && '.exe' || '' }}
          ARCHIVE_NAME=git-reports_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip $ARCHIVE_NAME $BINARY_NAME
          else
            tar czvf $ARCHIVE_NAME $BINARY_NAME
          fi
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            git-reports_${{ env.VERSION }}_linux_amd64.tar.gz
            git-reports_${{ env.VERSION }}_windows_amd64.zip
